importance = TRUE)
importance(rf_stars)
varImpPlot(rf_stars)
save.image("~/Desktop/yelpDataset/mlFinalYelp/restaurantAnalysisData.RData")
rf_reviewCount = randomForest(review_count~.,
data = cleanDf,
mtry = 2,
importance = TRUE)
importance(rf_reviewCount)
varImpPlot(rf_reviewCount)
varImpPlot(rf_stars)
varImpPlot(rf_isOpen)
restaurantsOpen
rpart.plot(restaurantsOpen)
table(tree_predWithoutTakeOut, restaurant_test$is_open)
print((0+1939)/(nrow(restaurant_test)))
table(tree_predWithoutTakeOut, restaurant_test$is_open)
print((0+1995)/(nrow(restaurant_test)))
tree_OpenWithoutTakeOut
print(summary(tree_Open))
print((0+1939)/(nrow(restaurant_test)))
print(summary(tree_OpenWithoutTakeOut))
print((0+1995)/(nrow(restaurant_test)))
print(summary(tree_rc))
varImpPlot(rf_reviewCount)
varImpPlot(rf_reviewCount)
print(varImpPlot(rf_reviewCount))
library(tree)
library(dplyr)
library(ggplot2)
library(randomForest)
library(rpart.plot)
library(rpart)
restaurantDf = read.csv('restaurantInfo.csv', header = TRUE)
print("This is the summary information of the original dataset...")
print(summary(restaurantDf))
nObservations = nrow(restaurantDf)
nFactors = ncol(restaurantDf)
set.seed(1)
restaurantDf$stars <- as.numeric(restaurantDf$stars)
restaurantDf$review_count <- as.numeric(restaurantDf$review_count)
print(levels(restaurantDf$RestaurantsPriceRange2 ))
restaurantDf$RestaurantsPriceRange2<- factor(restaurantDf$RestaurantsPriceRange2, levels = c("Unknown", "1.0", "2.0", "3.0", "4.0"))
print(levels(restaurantDf$RestaurantsPriceRange2))
print(levels(restaurantDf$BusinessAcceptsCreditCards ))
restaurantDf$BusinessAcceptsCreditCards<- factor(restaurantDf$BusinessAcceptsCreditCards, levels = c("Unknown", "False", "True"))
print(levels(restaurantDf$BusinessAcceptsCreditCards ))
print(levels(restaurantDf$RestaurantsTakeOut ))
restaurantDf$RestaurantsTakeOut<- factor(restaurantDf$RestaurantsTakeOut, levels = c("Unknown", "False", "True"))
print(levels(restaurantDf$RestaurantsTakeOut ))
View(cleanDf)
restaurantsOpen <- rpart(is_open ~ . , data = restaurant_train, method = "class")
rpart.plot(restaurantsOpen)
tree_Open = tree(is_open~ ., data = restaurant_train)
print(summary(tree_Open))
tree_Open
plot(tree_Open)
text(tree_Open, pretty = 0)
tree_pred = predict(tree_Open, restaurant_test, type = "class")
table(tree_pred, restaurant_test$is_open)
print((0+1939)/(nrow(restaurant_test)))
print(importance(rf_isOpen))
print(varImpPlot(rf_isOpen))
varImpPlot(rf_isOpen)
varImpPlot(rf_isOpen)
print(importance(rf_stars))
print(varImpPlot(rf_stars))
print(importance(rf_reviewCount))
print(varImpPlot(rf_reviewCount))
set.seed(5)
firstThousand = 1:1000
library(ISLR)
Caravan.head()
Caravan
head(Caravan)
Caravan$Purchase = ifelse(Caravan$Purhcase == "No", 0, 1)
Caravan$Purchase = ifelse(Caravan$Purchase == "No", 0, 1)
head(Caravan)
Caravan$Purchase
head(Caravan)
test = Caravan[-firstThousand,]
boost = gbm(Purchase~., data = train,n.trees= 1000, shrinkage = 0.01, distribution = "gaussian")
install.packages('gbm')
library(gbm)
library(gbm)
library(ISLR)
library(gbm)
install.packages('gbm
')
install.packages('gbm')
install.packages("gbm")
library(gbm)
require(gbm)
head(Caravan)
Caravan$Purchase = ifelse(Caravan$Purchase == "No", 0, 1)
head(Caravan)
set.seed(5)
firstThousand = 1:1000
train = Caravan[firstThousand,]
test = Caravan[-firstThousand,]
boost = gbm(Purchase~., data = train,n.trees= 1000, shrinkage = 0.01, distribution = "gaussian")
library(gbm)
boost = gbm(Purchase~., data = train,n.trees= 1000, shrinkage = 0.01, distribution = "gaussian")
library(gbm)
boost = gbm(Purchase~., data = train,n.trees= 1000, shrinkage = 0.01, distribution = "gaussian")
summary(boost)
library(gbm)
boost = gbm(Purchase~., data = train,n.trees= 1000, shrinkage = 0.01, distribution = "gaussian")
summary(boost)
library(gbm)
set.seed(5)
boost = gbm(Purchase~., data = train,n.trees= 1000, shrinkage = 0.01, distribution = "gaussian")
summary(boost)
library(gbm)
set.seed(5)
boost = gbm(Purchase~., data = train,n.trees= 1000, shrinkage = 0.01, distribution = "gaussian")
summary(boost)
table(test$Purchase, predictions_test)
set.seed(5)
total_test = predict(boost, test, type = "response", n.trees = 1500)
predictions_test = ifelse(total_test <= 0.2, 0, 1)
table(test$Purchase, predictions_test)
predictions_test = ifelse(total_test <= 0.2, 0, 1)
table(test$Purchase, predictions_test)
set.seed(5)
table(test$Purchase, predictions_test)
library(glm)
install.packages('glm')
install.packages('glmnet')
library(glmnet)
library(glmnet)
logisticModel = glm(Purchase ~., data = train, family = "binomial")
total_testLogistic = predict(logisticModel, test, type = "response")
logisticPredictions_test = ifelse(total_testLogistic <= 0.2, 0, 1)
#Confusion Matrix
table(test$Purchase,logisticPredictions_test)
library(glmnet)
set.seed(5)
logisticModel = glm(Purchase ~., data = train, family = "binomial")
total_testLogistic = predict(logisticModel, test, type = "response")
logisticPredictions_test = ifelse(total_testLogistic <= 0.2, 0, 1)
#Confusion Matrix
table(test$Purchase,logisticPredictions_test)
library(tree)
library(dplyr)
library(ggplot2)
library(randomForest)
library(rpart.plot)
library(rpart)
restaurantDf = read.csv('restaurantInfo.csv', header = TRUE)
print("This is the summary information of the original dataset...")
print(summary(restaurantDf))
nObservations = nrow(restaurantDf)
nFactors = ncol(restaurantDf)
restaurantDf$stars <- as.numeric(restaurantDf$stars)
restaurantDf$review_count <- as.numeric(restaurantDf$review_count)
print(levels(restaurantDf$RestaurantsPriceRange2 ))
restaurantDf$RestaurantsPriceRange2<- factor(restaurantDf$RestaurantsPriceRange2, levels = c("Unknown", "1.0", "2.0", "3.0", "4.0"))
print(levels(restaurantDf$RestaurantsPriceRange2))
print(levels(restaurantDf$BusinessAcceptsCreditCards ))
restaurantDf$BusinessAcceptsCreditCards<- factor(restaurantDf$BusinessAcceptsCreditCards, levels = c("Unknown", "False", "True"))
print(levels(restaurantDf$BusinessAcceptsCreditCards ))
print(levels(restaurantDf$RestaurantsTakeOut ))
restaurantDf$RestaurantsTakeOut<- factor(restaurantDf$RestaurantsTakeOut, levels = c("Unknown", "False", "True"))
print(levels(restaurantDf$RestaurantsTakeOut ))
restaurantDf$stars <- as.numeric(restaurantDf$stars)
restaurantDf$review_count <- as.numeric(restaurantDf$review_count)
print(levels(restaurantDf$RestaurantsPriceRange2 ))
restaurantDf$RestaurantsPriceRange2<- factor(restaurantDf$RestaurantsPriceRange2, levels = c("Unknown", "1.0", "2.0", "3.0", "4.0"))
print(levels(restaurantDf$RestaurantsPriceRange2))
print(levels(restaurantDf$BusinessAcceptsCreditCards ))
restaurantDf$BusinessAcceptsCreditCards<- factor(restaurantDf$BusinessAcceptsCreditCards, levels = c("Unknown", "False", "True"))
print(levels(restaurantDf$BusinessAcceptsCreditCards ))
print(levels(restaurantDf$RestaurantsTakeOut ))
restaurantDf$RestaurantsTakeOut<- factor(restaurantDf$RestaurantsTakeOut, levels = c("Unknown", "False", "True"))
print(levels(restaurantDf$RestaurantsTakeOut ))
cleanDf <- subset(restaurantDf, select = -c(X, index, business_id, city, neighborhood, state))
head(cleanDf)
```
restaurant_train = cleanDf %>%
sample_frac(.7)
restaurant_test = cleanDf %>%
setdiff(restaurant_train)
restaurantsStars <- rpart(stars ~ . , data = restaurant_train, method = "anova", minsplit = 2)
rpart.plot(restaurantsStars)
tree_stars = tree(stars~., data = restaurant_train)
print(summary(tree_stars))
tree_stars
plot(tree_stars)
text(tree_stars,  pretty = 0)
restaurantsStars <- rpart(stars ~ . , data = restaurant_train, method = "anova", minsplit = 2)
rpart.plot(restaurantsStars)
tree_stars = tree(stars~., data = restaurant_train)
print(summary(tree_stars))
tree_stars
plot(tree_stars)
text(tree_stars,  pretty = 0)
dev.off()
restaurantsStars <- rpart(stars ~ . , data = restaurant_train, method = "anova", minsplit = 2)
rpart.plot(restaurantsStars)
restaurantsStars <- rpart(stars ~ . , data = restaurant_train, method = "anova", minsplit = 50)
rpart.plot(restaurantsStars)
restaurantsStars <- rpart(stars ~ . , data = restaurant_train, method = "anova",  control = list(minsplit = 2))
rpart.plot(restaurantsStars)
restaurant_train$stars
restaurantsStars <- rpart(stars ~ . , data = restaurant_train, method = "anova",  cp = 0)
rpart.plot(restaurantsStars)
restaurantsStars <- rpart(stars ~ . , data = restaurant_train, method = "anova",  cp = 0.1)
rpart.plot(restaurantsStars)
restaurantsStars <- rpart(stars ~ . , data = restaurant_train, method = "anova",  cp = 0.001)
rpart.plot(restaurantsStars)
restaurantsStars <- rpart(stars ~ . , data = restaurant_train, method = "anova",  cp = 0.005)
rpart.plot(restaurantsStars)
library(ISLR)
require(gbm)
head(Caravan)
Caravan$Purchase = ifelse(Caravan$Purchase == "No", 0, 1)
head(Caravan)
set.seed(5)
firstThousand = 1:1000
train = Caravan[firstThousand,]
test = Caravan[-firstThousand,]
library(gbm)
set.seed(5)
boost = gbm(Purchase~., data = train,n.trees= 1000, shrinkage = 0.01, distribution = "gaussian")
summary(boost)
set.seed(5)
total_test = predict(boost, test, type = "response", n.trees = 1500)
predictions_test = ifelse(total_test <= 0.2, 0, 1)
set.seed(5)
total_test = predict(boost, test, type = "response", n.trees = 1000)
predictions_test = ifelse(total_test <= 0.2, 0, 1)
set.seed(5)
table(test$Purchase, predictions_test)
library(tree)
library(dplyr)
library(ggplot2)
library(randomForest)
library(rpart.plot)
library(rpart)
restaurantDf = read.csv('restaurantInfo.csv', header = TRUE)
print("This is the summary information of the original dataset...")
print(summary(restaurantDf))
nObservations = nrow(restaurantDf)
nFactors = ncol(restaurantDf)
print(levels(restaurantDf$RestaurantsPriceRange2 ))
restaurantDf$RestaurantsPriceRange2<- factor(restaurantDf$RestaurantsPriceRange2, levels = c("Unknown", "1.0", "2.0", "3.0", "4.0"))
print(levels(restaurantDf$RestaurantsPriceRange2))
print(levels(restaurantDf$BusinessAcceptsCreditCards ))
restaurantDf$BusinessAcceptsCreditCards<- factor(restaurantDf$BusinessAcceptsCreditCards, levels = c("Unknown", "False", "True"))
print(levels(restaurantDf$BusinessAcceptsCreditCards ))
print(levels(restaurantDf$RestaurantsTakeOut ))
restaurantDf$RestaurantsTakeOut<- factor(restaurantDf$RestaurantsTakeOut, levels = c("Unknown", "False", "True"))
print(levels(restaurantDf$RestaurantsTakeOut ))
restaurantDf$stars <- as.numeric(restaurantDf$stars)
restaurantDf$review_count <- as.numeric(restaurantDf$review_count)
cleanDf <- subset(restaurantDf, select = -c(X, index, business_id, city, neighborhood, state))
head(cleanDf)
```
cleanDf <- subset(restaurantDf, select = -c(X, index, business_id, city, neighborhood, state))
head(cleanDf)
```
restaurant_train = cleanDf %>%
sample_frac(.7)
restaurant_test = cleanDf %>%
setdiff(restaurant_train)
restaurantsOpen <- rpart(is_open ~ . , data = restaurant_train, method = "class")
rpart.plot(restaurantsOpen)
restaurantsOpen <- rpart(is_open ~ . , data = restaurant_train, method = "class", cp = 0.01)
rpart.plot(restaurantsOpen)
restaurantsOpen <- rpart(is_open ~ . , data = restaurant_train, method = "class", cp = 0.001)
rpart.plot(restaurantsOpen)
restaurantsOpen <- rpart(is_open ~ . , data = restaurant_train, method = "class", cp = 0.001)
rpart.plot(restaurantsOpen)
svg(rpart.plot(restaurantsOpen) )
rpart.plot(restaurantsOpen)
restaurantsStars <- rpart(stars ~ . , data = restaurant_train, method = "anova",  cp = 0.01)
rpart.plot(restaurantsStars)
restaurantsStars <- rpart(stars ~ . , data = restaurant_train, method = "anova",  cp = 0.01)
rpart.plot(restaurantsStars)
restaurantsStars <- rpart(stars ~ . , data = restaurant_train, method = "anova",  cp = 0.001)
rpart.plot(restaurantsStars)
restaurantsStars <- rpart(stars ~ . , data = restaurant_train, method = "anova",  cp = 0.003)
restaurantsStars <- rpart(stars ~ . , data = restaurant_train, method = "anova",  cp = 0.003)
rpart.plot(restaurantsStars)
restaurantsStars <- rpart(stars ~ . , data = restaurant_train, method = "anova",  cp = 0.002)
rpart.plot(restaurantsStars)
restaurantReviews <- rpart(review_count ~ . , data = restaurant_train, method = "anova", cp = 0.001)
restaurantReviews <- rpart(review_count ~ . , data = restaurant_train, method = "anova", cp = 0.001)
restaurantReviews <- rpart(review_count ~ . , data = restaurant_train, method = "anova", cp = 0.001)
restaurantReviews <- rpart(review_count ~ . , data = restaurant_train, method = "anova", cp = 0.001)
restaurantReviews <- rpart(review_count ~ . , data = restaurant_train, method = "anova", cp = 0.001)
rpart.plot(restaurantReviews)
restaurantReviews <- rpart(review_count ~ . , data = restaurant_train, method = "anova", cp = 0.005)
rpart.plot(restaurantReviews)
restaurantReviews <- rpart(review_count ~ . , data = restaurant_train, method = "anova", cp = 0.003)
restaurantReviews <- rpart(review_count ~ . , data = restaurant_train, method = "anova", cp = 0.003)
rpart.plot(restaurantReviews)
View(cleanDf)
View(restaurantReviews)
View(restaurantDf)
View(cleanDf)
library(tree)
library(dplyr)
library(ggplot2)
library(randomForest)
library(rpart.plot)
library(rpart)
restaurantDf = read.csv('restaurantInfo.csv', header = TRUE)
print("This is the summary information of the original dataset...")
print(summary(restaurantDf))
nObservations = nrow(restaurantDf)
nFactors = ncol(restaurantDf)
restaurantDf$stars <- as.numeric(restaurantDf$stars)
restaurantDf$review_count <- as.numeric(restaurantDf$review_count)
print(levels(restaurantDf$RestaurantsPriceRange2 ))
restaurantDf$RestaurantsPriceRange2<- factor(restaurantDf$RestaurantsPriceRange2, levels = c("Unknown", "1.0", "2.0", "3.0", "4.0"))
print(levels(restaurantDf$RestaurantsPriceRange2))
print(levels(restaurantDf$BusinessAcceptsCreditCards ))
restaurantDf$BusinessAcceptsCreditCards<- factor(restaurantDf$BusinessAcceptsCreditCards, levels = c("Unknown", "False", "True"))
print(levels(restaurantDf$BusinessAcceptsCreditCards ))
print(levels(restaurantDf$RestaurantsTakeOut ))
restaurantDf$RestaurantsTakeOut<- factor(restaurantDf$RestaurantsTakeOut, levels = c("Unknown", "False", "True"))
print(levels(restaurantDf$RestaurantsTakeOut ))
cleanDf <- subset(restaurantDf, select = -c(X, index, business_id, city, neighborhood, state))
head(cleanDf)
```
restaurant_train = cleanDf %>%
sample_frac(.7)
restaurant_test = cleanDf %>%
setdiff(restaurant_train)
restaurantsOpen <- rpart(is_open ~ . , data = restaurant_train, method = "class", cp = 0.001)
rpart.plot(restaurantsOpen)
restaurantsStars <- rpart(stars ~ . , data = restaurant_train, method = "anova",  cp = 0.002)
rpart.plot(restaurantsStars)
restaurantReviews <- rpart(review_count ~ . , data = restaurant_train, method = "anova", cp = 0.003)
rpart.plot(restaurantReviews)
printcp(restaurantTrees)
printcp(restaurantReviews)
summary(restaurantReviews)
restaurantReviews <- rpart(review_count ~ . , data = restaurant_train, method = "anova", cp = 0.003)
library(tree)
library(dplyr)
library(ggplot2)
library(randomForest)
library(rpart.plot)
library(rpart)
restaurantDf = read.csv('restaurantInfo.csv', header = TRUE)
print("This is the summary information of the original dataset...")
print(summary(restaurantDf))
nObservations = nrow(restaurantDf)
nFactors = ncol(restaurantDf)
restaurantDf$stars <- as.numeric(restaurantDf$stars)
restaurantDf$review_count <- as.numeric(restaurantDf$review_count)
print(levels(restaurantDf$RestaurantsPriceRange2 ))
restaurantDf$RestaurantsPriceRange2<- factor(restaurantDf$RestaurantsPriceRange2, levels = c("Unknown", "1.0", "2.0", "3.0", "4.0"))
print(levels(restaurantDf$RestaurantsPriceRange2))
print(levels(restaurantDf$BusinessAcceptsCreditCards ))
restaurantDf$BusinessAcceptsCreditCards<- factor(restaurantDf$BusinessAcceptsCreditCards, levels = c("Unknown", "False", "True"))
print(levels(restaurantDf$BusinessAcceptsCreditCards ))
print(levels(restaurantDf$RestaurantsTakeOut ))
restaurantDf$RestaurantsTakeOut<- factor(restaurantDf$RestaurantsTakeOut, levels = c("Unknown", "False", "True"))
print(levels(restaurantDf$RestaurantsTakeOut ))
print(levels(restaurantDf$RestaurantsPriceRange2 ))
restaurantDf$RestaurantsPriceRange2<- factor(restaurantDf$RestaurantsPriceRange2, levels = c("Unknown", "1.0", "2.0", "3.0", "4.0"))
print(levels(restaurantDf$RestaurantsPriceRange2))
print(levels(restaurantDf$BusinessAcceptsCreditCards ))
restaurantDf$BusinessAcceptsCreditCards<- factor(restaurantDf$BusinessAcceptsCreditCards, levels = c("Unknown", "False", "True"))
print(levels(restaurantDf$BusinessAcceptsCreditCards ))
print(levels(restaurantDf$RestaurantsTakeOut ))
restaurantDf$RestaurantsTakeOut<- factor(restaurantDf$RestaurantsTakeOut, levels = c("Unknown", "False", "True"))
print(levels(restaurantDf$RestaurantsTakeOut ))
cleanDf <- subset(restaurantDf, select = -c(X, index, business_id, city, neighborhood, state))
head(cleanDf)
```
restaurant_train = cleanDf %>%
sample_frac(.7)
restaurant_test = cleanDf %>%
setdiff(restaurant_train)
restaurantReviews <- rpart(review_count ~ . , data = restaurant_train, method = "anova", cp = 0.003)
rpart.plot(restaurantReviews)
tree_rc = tree(review_count~., data = restaurant_train)
print(summary(tree_rc))
tree_rc
plot(tree_rc)
text(tree_rc,  pretty = 0)
tree_predReviews = predict(restaurantReviews, restaurant_test, type = "anova")
tree_predReviews = predict(restaurantReviews, restaurant_test, type = "matrix")
table(tree_predReviews, restaurant_test$review_count)
library(tree)
library(dplyr)
library(ggplot2)
library(randomForest)
library(rpart.plot)
library(rpart)
restaurantDf = read.csv('restaurantInfo.csv', header = TRUE)
print("This is the summary information of the original dataset...")
print(summary(restaurantDf))
nObservations = nrow(restaurantDf)
nFactors = ncol(restaurantDf)
restaurantDf$stars <- as.numeric(restaurantDf$stars)
restaurantDf$review_count <- as.numeric(restaurantDf$review_count)
print(levels(restaurantDf$RestaurantsPriceRange2 ))
restaurantDf$RestaurantsPriceRange2<- factor(restaurantDf$RestaurantsPriceRange2, levels = c("Unknown", "1.0", "2.0", "3.0", "4.0"))
print(levels(restaurantDf$RestaurantsPriceRange2))
print(levels(restaurantDf$BusinessAcceptsCreditCards ))
restaurantDf$BusinessAcceptsCreditCards<- factor(restaurantDf$BusinessAcceptsCreditCards, levels = c("Unknown", "False", "True"))
print(levels(restaurantDf$BusinessAcceptsCreditCards ))
print(levels(restaurantDf$RestaurantsTakeOut ))
restaurantDf$RestaurantsTakeOut<- factor(restaurantDf$RestaurantsTakeOut, levels = c("Unknown", "False", "True"))
print(levels(restaurantDf$RestaurantsTakeOut ))
print(levels(restaurantDf$RestaurantsPriceRange2 ))
restaurantDf$RestaurantsPriceRange2<- factor(restaurantDf$RestaurantsPriceRange2, levels = c("Unknown", "1.0", "2.0", "3.0", "4.0"))
print(levels(restaurantDf$RestaurantsPriceRange2))
print(levels(restaurantDf$BusinessAcceptsCreditCards ))
restaurantDf$BusinessAcceptsCreditCards<- factor(restaurantDf$BusinessAcceptsCreditCards, levels = c("Unknown", "False", "True"))
print(levels(restaurantDf$BusinessAcceptsCreditCards ))
print(levels(restaurantDf$RestaurantsTakeOut ))
restaurantDf$RestaurantsTakeOut<- factor(restaurantDf$RestaurantsTakeOut, levels = c("Unknown", "False", "True"))
print(levels(restaurantDf$RestaurantsTakeOut ))
print(levels(restaurantDf$RestaurantsPriceRange2 ))
restaurantDf$RestaurantsPriceRange2<- factor(restaurantDf$RestaurantsPriceRange2, levels = c("Unknown", "1.0", "2.0", "3.0", "4.0"))
print(levels(restaurantDf$RestaurantsPriceRange2))
print(levels(restaurantDf$BusinessAcceptsCreditCards ))
restaurantDf$BusinessAcceptsCreditCards<- factor(restaurantDf$BusinessAcceptsCreditCards, levels = c("Unknown", "False", "True"))
print(levels(restaurantDf$BusinessAcceptsCreditCards ))
print(levels(restaurantDf$RestaurantsTakeOut ))
restaurantDf$RestaurantsTakeOut<- factor(restaurantDf$RestaurantsTakeOut, levels = c("Unknown", "False", "True"))
print(levels(restaurantDf$RestaurantsTakeOut ))
cleanDf <- subset(restaurantDf, select = -c(X, index, business_id, city, neighborhood, state))
head(cleanDf)
```
restaurant_train = cleanDf %>%
sample_frac(.7)
restaurant_test = cleanDf %>%
setdiff(restaurant_train)
restaurantsStars <- rpart(stars ~ . , data = restaurant_train, method = "anova",  cp = 0.002)
rpart.plot(restaurantsStars)
restaurantReviews <- rpart(review_count ~ . , data = restaurant_train, method = "anova", cp = 0.003)
rpart.plot(restaurantReviews)
tree_rc = tree(review_count~., data = restaurant_train)
print(summary(tree_rc))
tree_rc
plot(tree_rc)
text(tree_rc,  pretty = 0)
tree_rc_estimate = predict(tree_rc, newdata = restaurant_train)
mean((tree_rc_estimate - restaurant_test$review_count)^2)
restaurant_train = cleanDf %>%
sample_frac(.5)
restaurant_test = cleanDf %>%
setdiff(restaurant_train)
tree_rc = tree(review_count~., data = restaurant_train)
print(summary(tree_rc))
tree_rc
plot(tree_rc)
text(tree_rc,  pretty = 0)
tree_rc_estimate = predict(tree_rc, newdata = restaurant_train)
mean((tree_rc_estimate - restaurant_test$review_count)^2)
restaurant_train = cleanDf %>%
sample_frac(.7)
restaurant_test = cleanDf %>%
setdiff(restaurant_train)
mean((tree_rc_estimate - restaurant_test$review_count)^2)
tree_rc = tree(review_count~., data = restaurant_train)
print(summary(tree_rc))
tree_rc
plot(tree_rc)
text(tree_rc,  pretty = 0)
tree_rc_estimate = predict(tree_rc, newdata = restaurant_train)
mean((tree_rc_estimate - restaurant_test$review_count)^2)
set.seed(1)
restaurant_train = cleanDf %>%
sample_frac(.7)
restaurant_test = cleanDf %>%
setdiff(restaurant_train)
tree_rc = tree(review_count~., data = restaurant_train)
print(summary(tree_rc))
tree_rc
plot(tree_rc)
text(tree_rc,  pretty = 0)
tree_rc_estimate = predict(tree_rc, newdata = restaurant_train)
mean((tree_rc_estimate - restaurant_test$review_count)^2)
tree_rc = tree(review_count~., data = restaurant_train)
print(summary(tree_rc))
tree_rc
plot(tree_rc)
text(tree_rc,  pretty = 0)
tree_rc_estimate = predict(tree_rc, newdata = restaurant_train)
mean((tree_rc_estimate - restaurant_test$review_count)^2)
sqrt(92068.92)
median(cleanDf$review_count)
print(mean((tree_rc_estimate - restaurant_test$review_count)^2))
print(median(cleanDf$review_count))
fuck
rf_rc_estimate = predict(rf_reviewCount, newdata = restaurant_train)
print(mean((rf_rc_estimate - restaurant_test$review_count)^2))
set.seed(1)
rf_rc_estimate = predict(rf_reviewCount, newdata = restaurant_train)
print(mean((rf_rc_estimate - restaurant_test$review_count)^2))
print(median(cleanDf$review_count))
rf_isOpen = randomForest(is_open~.,
data = cleanDf,
mtry = 3,
importance = TRUE)
rf_open_estimate = predict(rf_isOpen, newdata = restaurant_train)
print(mean((rf_open_estimate - restaurant_test$review_count)^2))
print(mean((rf_open_estimate - restaurant_test$review_count)^2))
print(median(cleanDf$review_count))
rf_isOpen = randomForest(is_open~.,
data = cleanDf,
mtry = 3,
importance = TRUE)
